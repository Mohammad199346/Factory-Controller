local HttpService = game:GetService("HttpService")

-- Connecting to Local host
--local urlGet = "http://localhost:3000/getGameState"
--local urlUpdate = "http://localhost:3000/updateGameState"

-- Connecting to the Paul server 
--local urlGet = "https://131.188.76.66:3001/getGameState"
--local urlUpdate = "https://131.188.76.66:3001/updateGameState"

--Connecting to Glitch
local urlGet = "https://arrow-troubled-clover.glitch.me/getGameState"
local urlUpdate = "https://arrow-troubled-clover.glitch.me/updateGameState"
local tileUrl = "http://arrow-troubled-clover.glitch.me/getLocation"

local function buildTransportersTable()
	local transportersTable = {}
	local transporterFolder = game.Workspace.ConstructionZone.FactoryFloor.Transporters
	for _, transporter in ipairs(transporterFolder:GetChildren()) do
		if transporter:IsA("Part") then
			transportersTable[transporter.Name] = transporter
		end
	end

	return transportersTable
end

local function buildWorkstationsTable()
	local workstationsTable = {}
	local workstationFolder = game.Workspace.ConstructionZone.FactoryFloor.Workstations
	for _, workstation in ipairs(workstationFolder:GetChildren()) do
		if workstation:IsA("Part") then
			workstationsTable[workstation.Name] = workstation
		end
	end

	return workstationsTable
end

local function sendWorkspaceDataToBackend()
	local workspaceData = {}
	local constructionZoneData = {}
	local factoryFloorData = {}
	
	local workspaceFolder = workspace
	local constructionZoneFolder = workspace.ConstructionZone
	local factoryFloorFolder = workspace.ConstructionZone.FactoryFloor

	for _, item in ipairs(workspaceFolder:GetChildren()) do
		-- Include all items in the Workspace folder
		workspaceData[#workspaceData + 1] = item.Name
	end
	
	for _, item in ipairs(constructionZoneFolder:GetChildren()) do
		-- Include all items in the ConstructionZone folder
		constructionZoneData[#constructionZoneData + 1] = item.Name
	end
	
	for _, item in ipairs(factoryFloorFolder:GetChildren()) do
		-- Include all items in the FactoryFloor folder
		factoryFloorData[#factoryFloorData + 1] = item.Name
	end

	local jsonData = HttpService:JSONEncode(workspaceData)
	print("Workspace items:", jsonData)
	local success, errorMessage = pcall(function()
		
		-- When using localhost
		--HttpService:PostAsync("http://localhost:3000/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Paul
		--HttpService:PostAsync("https://131.188.76.66:3001/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Glitch
		HttpService:PostAsync("https://arrow-troubled-clover.glitch.me/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)
	end)

	if not success then
		warn("Failed to send Workspace data. Error: " .. errorMessage)
	end
	
	local jsonData1 = HttpService:JSONEncode(constructionZoneData)
	print("Construction zone items:", jsonData1)
	local success, errorMessage = pcall(function()
		
		-- When using localhost
		--HttpService:PostAsync("http://localhost:3000/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Paul
		--HttpService:PostAsync("https://131.188.76.66:3001/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Glitch
		HttpService:PostAsync("https://arrow-troubled-clover.glitch.me/Workspace/ConstructionZone", jsonData1, Enum.HttpContentType.ApplicationJson, false)
	end)

	if not success then
		warn("Failed to send ConstructionZone data. Error: " .. errorMessage)
	end
	
	local jsonData2 = HttpService:JSONEncode(factoryFloorData)
	print("FactoryFloor items:", jsonData2)
	local success, errorMessage = pcall(function()
		
		-- When using localhost
		--HttpService:PostAsync("http://localhost:3000/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Paul
		--HttpService:PostAsync("https://131.188.76.66:3001/Workspace/", jsonData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Glitch
		HttpService:PostAsync("https://arrow-troubled-clover.glitch.me/Workspace/ConstructionZone/FactoryFloor", jsonData2, Enum.HttpContentType.ApplicationJson, false)
	end)

	if not success then
		warn("Failed to send FactoryFloor data. Error: " .. errorMessage)
	end
end

local transporters = buildTransportersTable()
local workstations = buildWorkstationsTable()
local dataModifiedT = false
local dataModifiedW = false

-- Sending transporter data to the backend
local function sendTDataToBackend()
	local gameState = {}
	for _, transporter in pairs(transporters) do
		gameState[transporter.Name] = {
			position = string.format("x = %.3f,y = %.3f,z = %.3f", transporter.Position.X, transporter.Position.Y, transporter.Position.Z)
		}
	end

	local jsonData = HttpService:JSONEncode(gameState)

	print("Game state is:", jsonData)

	local headers = { ["Content-Type"] = "application/json" }

	local success, errorMessage = pcall(function()
		HttpService:PostAsync(urlUpdate, jsonData, Enum.HttpContentType.ApplicationJson, false)
	end)

	if success then
		print("Game state updated successfully.")
	else
		warn("Failed to update game state. Error: " .. errorMessage)
	end
end

-- Sending workstation data to the backend
local function sendWDataToBackend()
	local gameState = {}
	for _, workstation in pairs(workstations) do
		gameState[workstation.Name] = {
			position = string.format("x = %.3f,y = %.3f,z = %.3f", workstation.Position.X, workstation.Position.Y, workstation.Position.Z)
		}
	end

	local jsonData = HttpService:JSONEncode(gameState)

	print("Game state is:", jsonData)

	local headers = { ["Content-Type"] = "application/json" }

	local success, errorMessage = pcall(function()
		HttpService:PostAsync(urlUpdate, jsonData, Enum.HttpContentType.ApplicationJson, false)
	end)

	if success then
		print("Game state updated successfully.")
	else
		warn("Failed to update game state. Error: " .. errorMessage)
	end
end

-- Reading transporter data from the backen
local function readTDataFromBackend()
	local success, response = pcall(function()
		return HttpService:GetAsync(urlGet)
	end)

	if success then

		print("Response from the backend:", response)

		local gameState = HttpService:JSONDecode(response)
		if type(gameState) == 'table' then

			print("Game State from the Backend:", gameState)

			local transportersInGame = buildTransportersTable()

			for transporterName, data in pairs(gameState) do
				local transporter = transportersInGame[transporterName]
				if transporter then

					print("Data from the backend:", data)

					-- The position string from backend
					local positionStr = data.position
					-- Extracting the x, y, z coordinates from the position string
					local x, y, z = positionStr:match("x%s*=%s*([^,]+),%s*y%s*=%s*([^,]+),%s*z%s*=%s*(.*)")
					-- Parsing string values to numbers and constructing a Vector3
					local receivedPosition = Vector3.new(tonumber(x), tonumber(y), tonumber(z))

					transporter.Position = receivedPosition -- Assuming instant position update; use TweenService for smooth transition.
					transportersInGame[transporterName] = nil -- Existing in backend, remove from temp table.
				else
					-- If transporter does not exist in the game but is in the backend, create it or handle accordingly.
				end
			end


			-- Any transporter left in the transportersInGame means it doesn't exist in the backend anymore.
			for transporterName, transporter in pairs(transportersInGame) do
				transporter:Destroy()
				dataModifiedT = true
			end
		else
			warn("Game state is not in expected format.")
		end
	else
		warn("Failed to retrieve data from the backend: " .. tostring(response))
	end

	-- Send data for Transporters (only names, without positions)
	local transportersData = {}
	for _, transporter in pairs(transporters) do
		transportersData[#transportersData + 1] = transporter.Name
	end

	local jsonTransportersData = HttpService:JSONEncode(transportersData)
	local success, errorMessage = pcall(function()
		--HttpService:PostAsync("http://localhost:3000/Workspace/Transporters/", jsonTransportersData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Paul
		--HttpService:PostAsync("https://131.188.76.66:3001/Workspace/Transporters/", jsonTransportersData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Glitch
		HttpService:PostAsync("https://arrow-troubled-clover.glitch.me/Workspace/ConstructionZone/FactoryFloor/Transporters/", jsonTransportersData, Enum.HttpContentType.ApplicationJson, false)
	end)

	if not success then
		warn("Failed to send Transporters data. Error: " .. errorMessage)
	end

end

-- Reading transporter data from the backen
local function readWDataFromBackend()
	local success, response = pcall(function()
		return HttpService:GetAsync(urlGet)
	end)

	if success then

		print("Response from the backend:", response)

		local gameState = HttpService:JSONDecode(response)
		if type(gameState) == 'table' then

			print("Game State from the Backend:", gameState)

			local workstationsInGame = buildWorkstationsTable()

			for workstationName, data in pairs(gameState) do
				local workstation = workstationsInGame[workstationName]
				if workstation then

					print("Data from the backend:", data)

					-- The position string from backend
					local positionStr = data.position
					-- Extracting the x, y, z coordinates from the position string
					local x, y, z = positionStr:match("x%s*=%s*([^,]+),%s*y%s*=%s*([^,]+),%s*z%s*=%s*(.*)")
					-- Parsing string values to numbers and constructing a Vector3
					local receivedPosition = Vector3.new(tonumber(x), tonumber(y), tonumber(z))

					workstation.Position = receivedPosition -- Assuming instant position update; use TweenService for smooth transition.
					workstationsInGame[workstationName] = nil -- Existing in backend, remove from temp table.
				else
					-- If transporter does not exist in the game but is in the backend, create it or handle accordingly.
				end
			end


			-- Any workstation left in the workstationsInGame means it doesn't exist in the backend anymore.
			for workstationName, workstation in pairs(workstationsInGame) do
				workstation:Destroy()
				dataModifiedW = true
			end
		else
			warn("Game state is not in expected format.")
		end
	else
		warn("Failed to retrieve data from the backend: " .. tostring(response))
	end

	-- Send data for Workstations (only names, without positions)
	local workstationsData = {}
	for _, workstation in pairs(workstations) do
		workstationsData[#workstationsData + 1] = workstation.Name
	end

	local jsonWorkstationsData = HttpService:JSONEncode(workstationsData)
	local success, errorMessage = pcall(function()
		--HttpService:PostAsync("http://localhost:3000/Workspace/Transporters/", jsonTransportersData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Paul
		--HttpService:PostAsync("https://131.188.76.66:3001/Workspace/Transporters/", jsonTransportersData, Enum.HttpContentType.ApplicationJson, false)

		-- When using Glitch
		HttpService:PostAsync("https://arrow-troubled-clover.glitch.me/Workspace/ConstructionZone/FactoryFloor/Workstations/", jsonWorkstationsData, Enum.HttpContentType.ApplicationJson, false)
	end)

	if not success then
		warn("Failed to send Workstations data. Error: " .. errorMessage)
	end

end

-- To check if a transporter is present at a given tile
local function checkTransporterPresence(x, z)
	for transporterName, transporter in pairs(transporters) do
		if math.abs(transporter.Position.X - x) < 0.1 and math.abs(transporter.Position.Z - z) < 0.1 then
			return transporterName
		end
	end
	return "Transporter is not present"
end

-- To check if a workstation is present at a given tile
local function checkWorkstationPresence(x, z)
	for workstationName, workstation in pairs(workstations) do
		if math.abs(workstation.Position.X - x) < 0.1 and math.abs(workstation.Position.Z - z) < 0.1 then
			return workstationName
		end
	end
	return "Workstation is not present"
end

-- Reading tile data
local function readTileDataFromBackend()
	
	--print("Reading tile data")
	--while true do
		-- Make a GET request to the backend to retrieve x and z values
		local success, response = pcall(function()
			return HttpService:GetAsync(tileUrl)
		end)

		local xToCheck = nil
		local zToCheck = nil

		if success then
			local responseData = HttpService:JSONDecode(response)
			
			--print("Response of tile data:", responseData)
			
			if responseData and responseData.x and responseData.z then
				xToCheck = responseData.x
				zToCheck = responseData.z

				--break

			else
				warn("Invalid response from the backend")
			end
		else
			warn("Failed to retrieve data from the backend")
		end
		
		--print("Before entering if!!")

		if xToCheck and zToCheck then
			
			--print("Now in if of xToCheck!!!")
			-- Check transporter presence
			local transporterPresence = checkTransporterPresence(xToCheck, zToCheck)
			print("Transporter Presence:", transporterPresence)

			-- Check workstation presence
			local workstationPresence = checkWorkstationPresence(xToCheck, zToCheck)
			print("Workstation Presence:", workstationPresence)
		else
			warn("Invalid or missing x and z values from the backend")
		end
		
		--break

		--wait(10) -- Adjust the interval as needed
end

local function checkAndSyncData()
	sendWorkspaceDataToBackend()
	--sendDataToBackend()
	readTDataFromBackend()
	readWDataFromBackend()
	readTileDataFromBackend()

	while true do
		
		
		readTDataFromBackend()
		readWDataFromBackend()
		readTileDataFromBackend()
		
		

		if dataModifiedT and dataModifiedW then
			sendTDataToBackend()
			sendWDataToBackend()
			
			--sendWorkspaceDataToBackend()
			dataModifiedT = false
			dataModifiedW = false
		end

		wait(10) -- Adjust the interval as needed
	end
end

checkAndSyncData()
